{"version":3,"sources":["components/action-buttons/ActionButtons.js","assets/cross.svg","components/task/task.js","components/tasks/Tasks.js","components/task-container/TaskContainer.js","App.js","reportWebVitals.js","index.js"],"names":["ActionButtons","className","Task","task","removeFromList","setAsChecked","checked","onDoubleClick","id","detail","onClick","src","cross","alt","Tasks","tasks","length","map","TaskContainer","App","useState","setTasks","useEffect","console","log","filter","currentTasks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+VAUeA,EARO,WACpB,OACE,qBAAKC,UAAU,oBAAf,SACE,wBAAQA,UAAU,aAAlB,oBCLS,G,YAAA,IAA0B,mCCgB1BC,EAdF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aACpC,OACE,sBACEJ,UAAS,eAAUE,EAAKG,QAAU,UAAY,IAC9CC,cAAe,kBAAMF,EAAaF,EAAKK,KAFzC,UAIE,qBAAKP,UAAU,cAAf,SAA8BE,EAAKM,SACnC,sBAAMR,UAAU,SAASS,QAAS,kBAAMN,EAAeD,EAAKK,KAA5D,SACE,qBAAKG,IAAKC,EAAOC,IAAI,YAAYZ,UAAU,sBCWpCa,G,MAnBD,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOX,EAAmC,EAAnCA,eAAgBC,EAAmB,EAAnBA,aACtC,OACE,mCACGU,IAAK,OAAIA,QAAJ,IAAIA,OAAJ,EAAIA,EAAOC,QACfD,EAAME,KAAI,SAACd,GAAD,OACR,cAAC,EAAD,CACEA,KAAMA,EAENC,eAAgBA,EAChBC,aAAcA,GAFTF,EAAKK,OAMd,8ECHOU,EATO,SAAC,GAA2C,IAAzCH,EAAwC,EAAxCA,MAAMX,EAAkC,EAAlCA,eAAeC,EAAmB,EAAnBA,aAC5C,OACE,sBAAKJ,UAAU,iBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAOc,MAAOA,EAAOX,eAAgBA,EAAgBC,aAAcA,QCuC1Dc,MA1Cf,WACE,MAA0BC,mBAAS,CACjC,CAAEZ,GAAI,EAAGC,OAAQ,WAAYH,SAAS,GACtC,CAAEE,GAAI,EAAGC,OAAQ,YAAaH,SAAS,GACvC,CAAEE,GAAI,EAAGC,OAAQ,aAAcH,SAAS,KAH1C,mBAAOS,EAAP,KAAcM,EAAd,KA2BA,OAfAC,qBAAU,WACRC,QAAQC,IAAI,gBACX,IAcD,qBAAKvB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8CACA,cAAC,EAAD,CACEc,MAAOA,EACPX,eA3BR,SAAwBI,GACtBe,QAAQC,IAAIhB,EAAI,MAEhBa,EAAS,YAAIN,EAAMU,QAAO,SAACtB,GAAD,OAAUA,EAAKK,KAAOA,QAyB1CH,aAlBR,SAAsBG,GACpBa,GAAS,SAACK,GAER,OAAO,YACFA,EAAaT,KAAI,SAACd,GAAD,OAClBA,EAAKK,KAAOA,EAAZ,2BAAsBL,GAAtB,IAA4BG,SAAUH,EAAKG,UAAYH,kBCdlDwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.13232ac9.chunk.js","sourcesContent":["import \"./ActionButtons.css\";\n\nconst ActionButtons = () => {\n  return (\n    <div className=\"actions-container\">\n      <button className=\"add-button\">Add</button>\n    </div>\n  );\n};\n//sample commit to check branch permissions\nexport default ActionButtons;\n","export default __webpack_public_path__ + \"static/media/cross.2add4b66.svg\";","import \"./Task.css\";\nimport cross from \"../../assets/cross.svg\";\nconst Task = ({ task, removeFromList, setAsChecked }) => {\n  return (\n    <div\n      className={`task ${task.checked ? \"checked\" : \"\"}`}\n      onDoubleClick={() => setAsChecked(task.id)}\n    >\n      <div className=\"task-detail\">{task.detail}</div>\n      <span className=\"delete\" onClick={() => removeFromList(task.id)}>\n        <img src={cross} alt=\"cross-img\" className=\"cross-image\" />\n      </span>\n    </div>\n  );\n};\n\nexport default Task;\n","import Task from \"../task/task\";\nimport \"./Tasks.css\";\nconst Tasks = ({ tasks, removeFromList, setAsChecked }) => {\n  return (\n    <>\n      {tasks && tasks?.length ? (\n        tasks.map((task) => (\n          <Task\n            task={task}\n            key={task.id}\n            removeFromList={removeFromList}\n            setAsChecked={setAsChecked}\n          />\n        ))\n      ) : (\n        <p>No Tasks. Please click on add to add one.</p>\n      )}\n    </>\n  );\n};\n\nexport default Tasks;\n","import ActionButtons from \"../action-buttons/ActionButtons\";\nimport \"./TaskContainer.css\";\nimport Tasks from \"../tasks/Tasks\";\nconst TaskContainer = ({ tasks,removeFromList,setAsChecked }) => {\n  return (\n    <div className=\"task-container\">\n      <ActionButtons />\n      <Tasks tasks={tasks} removeFromList={removeFromList} setAsChecked={setAsChecked} />\n    </div>\n  );\n};\n\nexport default TaskContainer;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TaskContainer from \"./components/task-container/TaskContainer\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([\n    { id: 0, detail: \"homework\", checked: false },\n    { id: 1, detail: \"classwork\", checked: false },\n    { id: 2, detail: \"officework\", checked: false },\n  ]);\n\n  function removeFromList(id) {\n    console.log(id, \"id\");\n\n    setTasks([...tasks.filter((task) => task.id !== id)]);\n  }\n\n  useEffect(() => {\n    console.log(\"added test\");\n  }, []);\n\n  function setAsChecked(id) {\n    setTasks((currentTasks) => {\n      // removed console\n      return [\n        ...currentTasks.map((task) =>\n          task.id === id ? { ...task, checked: !task.checked } : task\n        ),\n      ];\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Task Manager</h1>\n        <TaskContainer\n          tasks={tasks}\n          removeFromList={removeFromList}\n          setAsChecked={setAsChecked}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}